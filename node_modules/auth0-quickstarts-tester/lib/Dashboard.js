'use strict';
var log = require('noogger');
var Promise = require('bluebird');
var spawn = require('child_process').spawn;
var request = require('request');
Promise.config({ warnings: true, longStackTraces: true });

class Dashboard {
  constructor(dashboardEmail, dashboardPassword, tenantName) {
    this.dashboardEmail = dashboardEmail;
    this.dashboardPassword = dashboardPassword;
    this.tenantName = tenantName;
  }

  setUp(clientType, webAppURL, userEmail, userPassword) {
    log.notice("============ STARTING STEP ============");
    log.notice("Preparing Dashboard (Test Tenant)");

    var dashboardEmail = this.dashboardEmail;
    var dashboardPassword = this.dashboardPassword;
    var tenantName = this.tenantName;

    var tenantDomain = 'https://' + tenantName + '.stage.auth0.com';
    const dashboard = {};

    var casper = () => new Promise(function (resolve, reject) {
      const cmd = spawn("casperjs", ["test", "./casper/setUp.js", "--verbose",
        "--email=" + dashboardEmail, "--password=" + dashboardPassword, "--tenant=" + tenantName],
        { cwd: __dirname });
      log.info("Creating new stage tenant and extracting the manage cookie.");
      cmd.stdout.on('data', (data) => {
        var dataString = data.toString().trim();
        process.stdout.write(data.toString());
        var cookieRgx = '[Auth0.Cookie]=';
        if (dataString.indexOf(cookieRgx) !== -1) {
          dashboard.cookie = dataString.substring(cookieRgx.length, dataString.length);
        }
        var tokenRgx = '[Auth0.Token]=';
        if (dataString.indexOf(tokenRgx) !== -1) {
          dashboard.token = dataString.substring(tokenRgx.length, dataString.length);
        }
      });
      cmd.stderr.on('data', (data) => {
        process.stdout.write(data.toString());
      });
      cmd.on('exit', function (code) {
        if (code !== 0) {
          log.error("Step failed with code: " + code);
          return reject(new Error("Casper SetUp Tests quitted with code: " + code));
        }
        return resolve(dashboard);
      });
    });

    var createClient = (token) => new Promise(function (resolve, reject) {
      //Below adds a client with 'Password' Grant Type enabled (db connections)
      var clientName = "test-client-" + parseInt(Math.random() * 100) + Date.now();
      var whitelistedURLs = ["http://localhost:3000/",
        "http://localhost:3000/callback",
        "http://localhost:8080/",
        "http://localhost:8080/callback"];
      var dynURL = webAppURL + "/callback";
      if (whitelistedURLs.indexOf(dynURL) === -1) {
        whitelistedURLs.push(dynURL);
      }
      if (whitelistedURLs.indexOf(webAppURL) === -1) {
        whitelistedURLs.push(webAppURL);
      }

      var options = {
        method: 'POST',
        url: tenantDomain + '/api/v2/clients',
        headers: {
          'content-type': 'application/json',
          'Authorization': 'Bearer ' + token
        },
        body: {
          name: clientName,
          app_type: clientType,
          grant_types: [
            "authorization_code",
            "http://auth0.com/oauth/grant-type/password-realm",
            "implicit",
            "password",
            "refresh_token"
          ],
          callbacks: whitelistedURLs
        },
        json: true
      };
      log.info("Creating a new client");
      request(options, function (error, response, body) {
        var valid = response.statusCode >= 200 && response.statusCode < 400;
        if (error || !valid) {
          log.error("Step failed with body: " + JSON.stringify(body));
          var err = error ? error : new Error("Request failed");
          return reject(err);
        }
        dashboard.domain = tenantDomain;
        dashboard.clientId = body.client_id;
        dashboard.clientSecret = body.client_secret;
        return resolve(body);
      });
    });

    var createUser = (token) => new Promise(function (resolve, reject) {
      var options = {
        method: 'POST',
        url: tenantDomain + '/api/v2/users',
        headers: {
          'content-type': 'application/json',
          'Authorization': 'Bearer ' + token
        },
        body: {
          email: userEmail,
          password: userPassword,
          connection: "Username-Password-Authentication"
        },
        json: true
      }
      log.info("Creating a new user");
      request(options, function (error, response, body) {
        var valid = response.statusCode >= 200 && response.statusCode < 400;
        if (error || !valid) {
          log.error("Step failed with body: " + JSON.stringify(body));
          var err = error ? error : new Error("Request failed");
          return reject(err);
        }
        return resolve(body);
      });
    });

    return casper()
      .then((dashboard) => {
        return createClient(dashboard.token)
          .then((clientBody) => createUser(dashboard.token))
          .then((userBody) => Promise.resolve(dashboard));
      })
      .catch((err) => {
        throw new Error("Prepare dashboard step failed: " + err);
      });
  }

  tearDown() {
    log.notice("============ FINAL STEP ============");
    log.notice("Clearing Dashboard (Test Tenant)");

    var dashboardEmail = this.dashboardEmail;
    var dashboardPassword = this.dashboardPassword;
    var tenantName = this.tenantName;

    return new Promise(function (resolve, reject) {
      const cmd = spawn("casperjs", ["test", "./casper/tearDown.js", "--verbose",
        "--email=" + dashboardEmail, "--password=" + dashboardPassword, "--tenant=" + tenantName],
        { cwd: __dirname });
      cmd.stdout.on('data', (data) => process.stdout.write(data.toString()));
      log.info("Deleting created tenant.");
      cmd.on('exit', function (code) {
        if (code !== 0) {
          log.error("Step failed with code: " + code);
          return reject(new Error("Casper TearDown Tests quitted with code: " + code));
        }
        return resolve();
      });
    }).catch((err) => {
      throw new Error("Clearing dashboard step failed");
    });
  }

}

module.exports = Dashboard;
