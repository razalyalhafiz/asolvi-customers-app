'use strict';
var spawn = require('child_process').spawn;
var util = require('util');
var fs = require('fs');
var path = require('path');
var request = require('request');
var Promise = require('bluebird');
var unzip = require('decompress');
var mkdirp = require('mkdirp');
var log = require('noogger');
Promise.config({ warnings: true, longStackTraces: true })


//Recursively makes a dir
function _makeDir(dir) {
  log.debug("Creating dir at: " + dir);
  return Promise.fromCallback((cb) => mkdirp(dir, cb));
}

//Recursively removes a dir
function _removeDir(dir) {
  return new Promise(function (resolve, reject) {
    log.debug("Removing dir at: " + dir);
    var cmd = spawn("rm", ["-r", dir], { shell: true });
    cmd.stdout.on('data', (data) => process.stdout.write(data.toString()));
    cmd.on('exit', function (code) {
      if (code == 0) {
        log.debug("Dir removed.");
        return resolve();
      }
      return reject(new Error("Couldn't delete the given directory. Code: " + code));
    });
  });
}


class Quickstart {
  constructor(projectPath) {
    this.projectPath = projectPath;
  }

  //Downloads and unzips the QS
  //Returns a Promise that resolves to the Project Path.
  download(options, dashboard) {
    log.debug(JSON.stringify(options))
    log.debug(JSON.stringify(dashboard))
    log.notice("============ STEP 1 ============");
    log.notice("Downloading QS (Request here)");

    options.organization = options.organization || 'auth0-samples';
    options.branch = options.branch || 'master';
    options.path = options.path || '01-Login';

    var compressedFilePath = path.join(this.projectPath, 'sample.zip');

    var folderName = options.path;
    if (!options.path) {
      console.error("'options.path' is not defined and it's required for QS Download");
      folderName = options.repository + "-" + options.branch;
    }
    var outputFilePath = path.join(this.projectPath, folderName);

    var samplePublicURL = "https://auth0.com/docs/package/v2?org=%s&repo=%s&branch=%s&path=%s";
    var sampleAuthenticatedURL = samplePublicURL + "&client_id=%s&client_secret=%s";
    //var GITHUB_URL = 'http://github.com/%s/%s/archive/%s.tar.gz';
    var url = util.format(samplePublicURL, options.organization, options.repository, options.branch, options.path);
    if (dashboard.clientId) {
      url = util.format(sampleAuthenticatedURL, options.organization, options.repository, options.branch, options.path, dashboard.clientId, dashboard.clientSecret);
    }

    // Download the project snapshot from Github
    var download = () => new Promise(function (resolve, reject) {
      log.debug("Downloading QS zip from Url: " + url);

      var file = fs.createWriteStream(compressedFilePath);
      file.on('finish', () => {
        return resolve(Promise.fromCallback((cb) => file.close(cb)));
      });
      file.on('error', (err) => {
        log.error("File write failed: " + err);
        return reject(err);
      });

      if (!dashboard.cookie) {
        throw new Error("Missing Auth0 Cookie");
      }
      var jar = request.jar();
      var cookie = request.cookie(dashboard.cookie);
      jar.setCookie(cookie, "https://auth0.com");
      request({ url: url, jar: jar })
        .on('error', (err) => {
          log.error("Request error: " + err);
          return reject(err);
        })
        .on('response', (response) => {
          if (response.statusCode != 200) {
            var err = new Error("Request errored with code " + response.statusCode + ": " + JSON.stringify(response.body));
            log.error("Request error: " + err);
            return reject(err);
          }
          response.pipe(file);
        });
    });

    // Decompress the project
    var decompress = (projectPath) => new Promise(function (resolve, reject) {
      log.debug("Decompressing file at dir: " + compressedFilePath);
      unzip(compressedFilePath, projectPath)
        .then((files) => {
          //Delete compressed file, but ignore the outcome
          fs.unlink(compressedFilePath, function (err) {
            if (err) {
              log.warning("Could not delete original zip file");
            }
          });
          log.debug("Decompressed file :ok:");
          return resolve(outputFilePath);
        });
    });

    return _makeDir(this.projectPath)
      .then(() => download())
      .then(() => decompress(this.projectPath))
      .catch((err) => {
        log.error("" + err);
        throw new Error("QS Download step failed", err);
      });
  }

  remove() {
    log.info("Removing QS folder");
    return _removeDir(this.projectPath);
  }
}

module.exports = Quickstart;
