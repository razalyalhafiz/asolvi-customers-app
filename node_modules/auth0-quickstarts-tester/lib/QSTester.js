'use strict';
var log = require('noogger');
var Promise = require('bluebird');
var Dashboard = require('./Dashboard.js');
var Quickstart = require('./Quickstart.js');
var Tester = require('./Tester.js');
Promise.config({ warnings: true, longStackTraces: true })

/**
 * Details of a Github repository.
 * @typedef {Object} Repository
 * @property {string} organization The repository's organization
 * @property {string} repository The repository's name
 * @property {string} branch The branch with Docker support
 * @property {string} path The path to the sample folder
 */

class QSTester {
  constructor() {
    //This constructor could receive settings like 'log location'
    this.tester = new Tester();
  }

  /**
   * Runs the app on Docker and runs the 'sign in' test against it. Finally, it stops the container.
   * @param {string} samplePath The path where the sample is located. A file named 'exec.sh' must exists to correctly execute the Docker container.
   * @param {Object} testParameters 
   * @param {string} testParameters.url The URL on which the app is expected to be run.
   * @param {string} testParameters.user The email or username to use in the web app test log in.
   * @param {string} testParameters.password The password to use in the web app test log in.
   * @returns a Promise that it's resolved after the app container is stopped.
   * @memberof QSTester
   */
  runOnPath(samplePath, testParameters) {
    //Check received parameters
    if (!samplePath) {
      throw new Error("Missing 'samplePath' value.");
    }
    if (!testParameters || !testParameters.url || !testParameters.user || !testParameters.password) {
      throw Error("Missing Web App login details.");
    }

    var tester = this.tester;
    return tester.runDocker(samplePath, testParameters.url)
      .then(() => tester.runTests(testParameters.url, testParameters.user, testParameters.password))
      .catch((err) => log.error("" + err))
      .then(() => tester.stopDocker());
  }

  /**
   * Creates a new tenant in the 'stage' region along with a new client and user.
   * Using those details, it downloads the samples listed in the repositories parameter and executes
   * a 'sign in' test against them. Finally, it deletes the created tenant.
   * @param {Object} dashboardLogin 
   * @param {string} dashboardLogin.user The main tenant email or username.
   * @param {string} dashboardLogin.password The main tenant password.
   * @param {Object} testParameters 
   * @param {string} testParameters.url The URL on which the app is expected to be run.
   * @param {string} testParameters.user The email or username to use in the web app test log in.
   * @param {string} testParameters.password The password to use in the web app test log in.
   * @param {string[]|Repository[]} repositories The list of repositories to test.
   * @returns a Promise that it's resolved after the created tenant is deleted.
   * @memberof QSTester
   */
  runAll(dashboardLogin, testParameters, repositories) {
    //Check received parameters
    if (!dashboardLogin || !dashboardLogin.user || !dashboardLogin.password) {
      throw Error("Missing 'Main Tenant' dashboard login details.");
    }
    testParameters = testParameters || {};
    testParameters.url = testParameters.url || "http://localhost:3000";
    testParameters.user = testParameters.user || "test-user@brucke.com";
    testParameters.password = testParameters.password || "test-password-brucke";

    const NEW_TENANT_NAME = "test-dashboard-" + parseInt(Math.random() * 100) + Date.now();
    const PROJECT_PATH = './QS'
    const CLIENT_TYPE = "regular_web";

    var dashboard = new Dashboard(dashboardLogin.user, dashboardLogin.password, NEW_TENANT_NAME);
    var quickstart = new Quickstart(PROJECT_PATH);

    return dashboard.setUp(CLIENT_TYPE, testParameters.url, testParameters.user, testParameters.password)
      .then((manageData) => {
        return Promise.mapSeries(repositories, (repo) => {
          if (typeof repo === 'string') {
            repo = { repository: repo };
          }
          return quickstart.download(repo, manageData)
            .then((samplePath) => {
              return this.runOnPath(samplePath, testParameters)
                .then(() => quickstart.remove());
            });
        });
      })
      .catch((err) => log.error("" + err))
      .finally(() => {
        return dashboard.tearDown()
          .catch((err) => log.error("Cleaning step failed"));
      });
  }
}

module.exports = QSTester;
